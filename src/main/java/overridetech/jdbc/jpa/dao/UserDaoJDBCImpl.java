package overridetech.jdbc.jpa.dao;

import overridetech.jdbc.jpa.model.User;
import overridetech.jdbc.jpa.util.Util;

import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

public class UserDaoJDBCImpl implements UserDao {
    public UserDaoJDBCImpl() {

    }

    public void createUsersTable() {
        try {
            Statement statement = Util.getPostgresConnectionJDBC().createStatement();
            String SQL = "create table if not exists \"User\" (\n" +
                    "    id BIGINT generated by default as identity primary key,\n" +
                    "    name varchar,\n" +
                    "    lastname varchar,\n" +
                    "    age smallint\n" +
                    ")";
            statement.executeUpdate(SQL);
        } catch (SQLException e) {

        }
    }

    public void dropUsersTable() {
        try {
            Statement statement = Util.getPostgresConnectionJDBC().createStatement();
            String SQL = "drop table if exists \"User\"";
            statement.executeUpdate(SQL);
        } catch (SQLException e) {

        }
    }

    public void saveUser(String name, String lastName, byte age) {
        try {
            PreparedStatement preparedStatement = Util.getPostgresConnectionJDBC().prepareStatement(
                    "insert into \"User\" (\"name\", \"lastname\", \"age\") values (?,?,?)");
            preparedStatement.setString(1, name);
            preparedStatement.setString(2, lastName);
            preparedStatement.setByte(3, age);

            preparedStatement.executeUpdate();
            System.out.println("User с именем – " + name +" добавлен в базу данных");
        } catch (SQLException e) {
            throw new RuntimeException(e);
        }
    }

    public void removeUserById(long id) {
        try {
            PreparedStatement preparedStatement = Util.getPostgresConnectionJDBC().prepareStatement(
                    "delete from \"User\" where id=?");
            preparedStatement.setLong(1, id);

            preparedStatement.executeUpdate();
        } catch (SQLException e) {
            throw new RuntimeException(e);
        }
    }

    public List<User> getAllUsers() {
        List<User> users = new ArrayList<>();
        try {
            Statement statement = Util.getPostgresConnectionJDBC().createStatement();
            String SQL = "select * from \"User\"";
            ResultSet resultSet = statement.executeQuery(SQL);
            while (resultSet.next()) {
                User user = new User();
                user.setId(resultSet.getLong("id"));
                user.setName(resultSet.getString("name"));
                user.setLastName(resultSet.getString("lastName"));
                user.setAge(resultSet.getByte("age"));

                users.add(user);
                System.out.println(user);
            }
        } catch (SQLException e) {
            throw new RuntimeException(e);
        }

        return users;
    }

    public void cleanUsersTable() {
        try {
            Statement statement = Util.getPostgresConnectionJDBC().createStatement();
            String SQL = "truncate table \"User\"";
            statement.executeUpdate(SQL);
        } catch (SQLException e) {
            throw new RuntimeException(e);
        }
    }
}
