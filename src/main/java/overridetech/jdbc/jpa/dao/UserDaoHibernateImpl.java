package overridetech.jdbc.jpa.dao;

import org.hibernate.Session;
import overridetech.jdbc.jpa.model.User;
import overridetech.jdbc.jpa.util.Util;


import java.util.List;

public class UserDaoHibernateImpl implements UserDao {
    private Session session;

    public UserDaoHibernateImpl() {
        session = Util.getSessionFactory().openSession();
    }


    @Override
    public void createUsersTable() {
        session.beginTransaction();
        session.createSQLQuery("create table if not exists \"User\" (\n" +
                "    id BIGINT generated by default as identity primary key,\n" +
                "    name varchar,\n" +
                "    lastname varchar,\n" +
                "    age smallint\n" +
                ")").executeUpdate();
        session.getTransaction().commit();
    }

    @Override
    public void dropUsersTable() {
        session.beginTransaction();
        session.createSQLQuery("drop table if exists \"User\"").executeUpdate();
        session.getTransaction().commit();
    }

    @Override
    public void saveUser(String name, String lastName, byte age) {
        session.beginTransaction();
        session.save(new User(name, lastName, age));
        System.out.println("User с именем – " + name +" добавлен в базу данных");
        session.getTransaction().commit();
    }

    @Override
    public void removeUserById(long id) {
        session.beginTransaction();
        User user = (User) session.get(User.class, id);
        session.delete(user);
        session.getTransaction().commit();
    }

    @Override
    public List<User> getAllUsers() {
        session.beginTransaction();
        List<User> users = session.createQuery("from User").list();
        for (User user : users) {
            System.out.println(user);
        }
        session.getTransaction().commit();
        return users;
    }

    @Override
    public void cleanUsersTable() {
        session.beginTransaction();
        session.createSQLQuery("truncate table \"User\"").executeUpdate();
        session.getTransaction().commit();
    }
}
